# include <cassert>
# include <cmath>
# include <cstdio>
# include <cstdlib>
# include <fstream>
# include <iostream>
# include <sstream>
# include <string>
# include <utility>
# include <unistd.h>
# include <sys/wait.h>
# include <sndfile.h>
# include "portaudio.h"
# include "FourierTransform.h"
# include "musicUtils.h"

using namespace std;

int main(int argc,char** argv,char** envp)
{
	int ch;
	string inputFile,outputMp4File,mp3File,instrumentLabel,animationFldr;
	double timePerMeasure;
	paTestData          data;
	while((ch=getopt(argc,argv,"d:i:l:m:o:"))!=EOF)
		{switch(ch)
			{case 'd':
				// Animation Directory File Path
				animationFldr=optarg;
				break;
			case 'i':
				// Song Input File(s)
				inputFile=optarg;
				break;
			case 'l':
				// Sound Label for Graph Plot
				instrumentLabel=optarg;
				break;
			case 'm':
				// .mp3 Input File
				mp3File=strtod(optarg,NULL);
				break;
			case 'o':
				// Output .wav file path
				outputMp4File=optarg;
				break;
			default:
				exit(EXIT_FAILURE);}}

	syntheticSong theSong=read_song_input_file(inputFile,envp);
	double fs=SAMPLE_RATE,maxValue;
	int index;
	data.maxFrameIndex=theSong.component[0].N; //S.N;	//data.maxFrameIndex = totalFrames = NUM_SECONDS * SAMPLE_RATE; /* Record for a few seconds. */
	data.frameIndex = 0;
	data.recordedSamples = (SAMPLE *) malloc( data.maxFrameIndex*sizeof(SAMPLE) );
	for(int i=0;i<data.maxFrameIndex;i++){data.recordedSamples[i]=0;}
	// Determine Greatest Amplitude (Must be between 0 and 1) Among Components
	double maxAmplitude=abs_maximum_of_array(theSong.component[0].amplitude,theSong.component[0].N,index);
	for(int i=1;i<theSong.numComponents;i++)
		{maxValue=abs_maximum_of_array(theSong.component[i].amplitude,theSong.component[i].N,index);
		if(maxValue>maxAmplitude){maxAmplitude=maxValue;}
		}
	//cout<<"|"<<maxAmplitude<<"|\n";
	// Add/Super-pose Normalized Signals
	for(int i=0;i<theSong.numComponents;i++)
		{for(long j=0;j<theSong.component[i].N;j++)
			{data.recordedSamples[j]+=theSong.component[i].amplitude[j]*theSong.component[i].signal[j];
			}
		}
	// Normalize Mixed Signal
	maxValue=abs_maximum_of_array(data.recordedSamples,data.maxFrameIndex,index);
	for(long i=0;i<data.maxFrameIndex;i++){data.recordedSamples[i]/=(SAMPLE)(maxValue/maxAmplitude);};

	int N=theSong.component[0].N;
	double *time=new double[N];
	for(int i=0;i<N;i++){time[i]=i/fs;}

	// Write out Single Signal for Plotting
	FILE *fOut;
	string aFile=animationFldr,bFile; aFile+="signal";
	// Write Signal to File
	fOut=fopen(aFile.c_str(),"w");
	index=SIG_FIGS;
	string header="# X Time (seconds) Y Amplitude",frmt="%0."+cnvrtNumToStrng(index,0)+"f\t%0."+cnvrtNumToStrng(index,0)+"f\n";
	fprintf(fOut,"%s\n",header.c_str());
	for(int i=0;i<N;i++){fprintf(fOut,frmt.c_str(),(double)i/fs,data.recordedSamples[i]);}
	fclose(fOut);

	// Write out Multiple Signals for Plotting
/*	double transFactor,*tmpArr;
	double signalHeight=2.0/(double)theSong.numComponents;
	double ampFactor=signalHeight/2;
	for(int i=0;i<theSong.numComponents;i++)
		{// Define Signal File
		bFile=animationFldr; bFile+="signal_"+cnvrtNumToStrng(i+1,0);
		fOut=fopen(bFile.c_str(),"w");
		fprintf(fOut,"%s\n",header.c_str());
		// Define Translation Factor
		transFactor=1-ampFactor-signalHeight*i;
		// Apply Amplitude and Translation Factor
		tmpArr=new double[theSong.component[i].N];
		for(long j=0;j<theSong.component[i].N;j++)
			{tmpArr[j]=ampFactor*theSong.component[i].amplitude[j]*theSong.component[i].signal[j] + transFactor;
			fprintf(fOut,frmt.c_str(),(double)j/fs,tmpArr[j]);}
		delete [] tmpArr;
		fclose(fOut);
		}
	generate_animation(aFile,time[N-1],data.maxFrameIndex,0.5,instrumentLabel,mp3File,theSong.noteFile,outputMp4File);
*/

	generate_animation(aFile,time[N-1],data.maxFrameIndex,0.2,instrumentLabel,mp3File,theSong.noteFile,outputMp4File);

}




