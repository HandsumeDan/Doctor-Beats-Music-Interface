# include <cassert>
# include <cerrno>	
# include <cmath>
# include <cstdio>
# include <cstdlib>
# include <cstring>
# include <fstream>
# include <iostream>
# include <sstream>
# include <string>
# include <unistd.h>
# include <utility>
# include <sndfile.h>
# include <sys/stat.h>
# include <sys/syscall.h>			// Defines OS System Calls
# include <sys/wait.h>
# include <unistd.h>
# include "portaudio.h"
# include "FourierTransform.h"
# include "musicConstants.h"

using namespace std;

# ifndef MusicUtils_H
# define MusicUtils_H

	/* #define DITHER_FLAG     (paDitherOff) */
	//# define DITHER_FLAG     (0) /**/
	/** Set to 1 if you want to capture the recording to a file. */
	//#define WRITE_TO_FILE   (0)
	//#define WRITE_TO_FILE   (1)

	/* Select sample format. */
	#if 1
	#define PA_SAMPLE_TYPE  paFloat32
	typedef float SAMPLE;
	#define SAMPLE_SILENCE  (0.0f)
	#define PRINTF_S_FORMAT "%.8f"
	#elif 1
	#define PA_SAMPLE_TYPE  paInt16
	typedef short SAMPLE;
	#define SAMPLE_SILENCE  (0)
	#define PRINTF_S_FORMAT "%d"
	#elif 0
	#define PA_SAMPLE_TYPE  paInt8
	typedef char SAMPLE;
	#define SAMPLE_SILENCE  (0)
	#define PRINTF_S_FORMAT "%d"
	#else
	#define PA_SAMPLE_TYPE  paUInt8
	typedef unsigned char SAMPLE;
	#define SAMPLE_SILENCE  (128)
	#define PRINTF_S_FORMAT "%d"
	#endif

	typedef struct
	{
	    int          frameIndex;  /* Index into sample array. */
	    int          maxFrameIndex;
	    SAMPLE      *recordedSamples;
	}
	paTestData;

	/* This routine will be called by the PortAudio engine when audio is needed.
	** It may be called at interrupt level on some machines so don't do anything
	** that could mess up the system like calling malloc() or free().
	*/
	static int recordCallback( const void *inputBuffer, void *outputBuffer,unsigned long framesPerBuffer,const PaStreamCallbackTimeInfo* timeInfo,PaStreamCallbackFlags statusFlags,void *userData )
	{
	    paTestData *data = (paTestData*)userData;
	    const SAMPLE *rptr = (const SAMPLE*)inputBuffer;
	    SAMPLE *wptr = &data->recordedSamples[data->frameIndex * NUM_CHANNELS];
	    long framesToCalc;
	    long i;
	    int finished;
	    unsigned long framesLeft = data->maxFrameIndex - data->frameIndex;

	    (void) outputBuffer; /* Prevent unused variable warnings. */
	    (void) timeInfo;
	    (void) statusFlags;
	    (void) userData;

	    if( framesLeft < framesPerBuffer )
	    {
		   framesToCalc = framesLeft;
		   finished = paComplete;
	    }
	    else
	    {
		   framesToCalc = framesPerBuffer;
		   finished = paContinue;
	    }

	    if( inputBuffer == NULL )
	    {
		   for( i=0; i<framesToCalc; i++ )
		   {
		       *wptr++ = SAMPLE_SILENCE;  /* left */
		       if( NUM_CHANNELS == 2 ) *wptr++ = SAMPLE_SILENCE;  /* right */
		   }
	    }
	    else
	    {
		   for( i=0; i<framesToCalc; i++ )
		   {
		       *wptr++ = *rptr++;  /* left */
		       if( NUM_CHANNELS == 2 ) *wptr++ = *rptr++;  /* right */
		   }
	    }
	    data->frameIndex += framesToCalc;
	    return finished;
	}

	/* This routine will be called by the PortAudio engine when audio is needed.
	** It may be called at interrupt level on some machines so don't do anything
	** that could mess up the system like calling malloc() or free().
	*/
	static int playCallback( const void *inputBuffer, void *outputBuffer,unsigned long framesPerBuffer,const PaStreamCallbackTimeInfo* timeInfo,PaStreamCallbackFlags statusFlags,void *userData )
	{
	    paTestData *data = (paTestData*)userData;
	    SAMPLE *rptr = &data->recordedSamples[data->frameIndex * NUM_CHANNELS];
	    SAMPLE *wptr = (SAMPLE*)outputBuffer;
	    unsigned int i;
	    int finished;
	    unsigned int framesLeft = data->maxFrameIndex - data->frameIndex;

	    (void) inputBuffer; /* Prevent unused variable warnings. */
	    (void) timeInfo;
	    (void) statusFlags;
	    (void) userData;

	    if( framesLeft < framesPerBuffer )
	    {
		   /* final buffer... */
		   for( i=0; i<framesLeft; i++ )
		   {
		       *wptr++ = *rptr++;  /* left */
		       if( NUM_CHANNELS == 2 ) *wptr++ = *rptr++;  /* right */
		   }
		   for( ; i<framesPerBuffer; i++ )
		   {
		       *wptr++ = 0;  /* left */
		       if( NUM_CHANNELS == 2 ) *wptr++ = 0;  /* right */
		   }
		   data->frameIndex += framesLeft;
		   finished = paComplete;
	    }
	    else
	    {
		   for( i=0; i<framesPerBuffer; i++ )
		   {
		       *wptr++ = *rptr++;  /* left */
		       if( NUM_CHANNELS == 2 ) *wptr++ = *rptr++;  /* right */
		   }
		   data->frameIndex += framesPerBuffer;
		   finished = paContinue;
	    }
	    return finished;
	}

	// Structure Array for storing Individual Component/Instrument Signal
	struct soundSignal
	{SAMPLE* signal;	// [N] signal amplitude data
	double* time;		// [N] time domain
	SAMPLE* amplitude;	// [N] signal ampltiudes
	string soundType;	// type of sound, specifies wavelet or transform to use to alter frequency distribution
	long N;			// signal Length
	};

	// 
	struct musicInput
	{string* amplitudeInput;
	int numAmpInputs;
	//string* effectsInput;		// for the future
	//int numEffectsInput;
	};

	// Structure Array for storing entire song, complete with one or more sound signals
	// Defines:
	// - tempo (variable: TIME_PER_MEASURE) in seconds
	// - sound type (variable: SOUND) (e.g. sinusosoundSignal read_amplitudes_in_wave_file(string inFile,int& N)id)
	// - articulation / amplitude / volume for each component
	struct syntheticSong
	{soundSignal *component;	// [N]
	musicInput *mInput;		// [N] Convenient Storage for User input
	//double** amplitude;		// [N][component.N] weight for mixing components 
	string* soundType;		// [N] 			type of sound, specifies wavelet or transform to use to alter frequency distribution
	string* filter;		// [N] filter command for sound
	int numComponents;				// number of components
	double timePerMeasure;	// single value representing the time (seconds) consumed by a full measure
	string noteFile;		// File path containing time versus notes_played
	};

	double abs_maximum_of_array(double* theArr,int N,int &index);
	double abs_maximum_of_array(SAMPLE* theArr,int N,int &index);
	double calc_average(double* X,int Sz);
	double calc_chi_squared(double *Y,double *expectedY,int N);
	double calc_weighted_average(double* X,double* W,int Sz);
	double calc_std_dev(double* X,int Sz,double Avg);
	double calculate_guitar_pitch(double desiredFrequency);
	double calculate_plucked_bass_pitch(double desiredFrequency);
	double calculate_plucked_string_pitch(double desiredFrequency);
	double calculate_soundFonts_pitch(string note,int octaveLevel);
	int check_for_blocked_music_input(string inFile,string &blockNameLst,string &blockDefLst);
	void clip_wave_file(string inputWaveFile,int startIndex,int endIndex,string outputWaveFile);
	string cnvrtNumToStrng(double Num,int numberAfterDecimalpoint);
	string cnvrtNumToStrng(int Num,int numberAfterDecimalpoint);
	string cnvrtNumToStrng(SAMPLE Num,int numberAfterDecimalpoint);
	void collect_measures_from_drums_input_file(string inFile,double timePerMeasure,string* &theNotes,string* &theDurations,string* &theAmplitudes,int &numUsedDrums);
	void collect_measures_from_input_file(string inFile,double timePerMeasure,string innerDelimiter,string outerDelimiter,string &theNotes,string &theDurations,string &theAmplitudes,int &numNotes);
	void collect_measures_from_misc_percussion_input_file(string inFile,double timePerMeasure,string* &theNotes,string* &theDurations,string* &theAmplitudes,int &numUsedDrums);
	void collect_measures_from_percussion_file(string inFile,double timePerMeasure,string* theDrumTypes,int numDrumTypes,string* &theNotes,string* &theDurations,string* &theAmplitudes,int &numUsedDrums);
	void collect_measures_from_simple_drums_input_file(string inFile,double timePerMeasure,string* &theNotes,string* &theDurations,string* &theAmplitudes,int &numUsedDrums);
	bool copyFile(string srcFile,string destFile);
	int count_delimiter(string Data,string delimiter);
	string define_amplitude_from_note(string inputFrac);
	double determine_maximum_frequency_peak(double* theInput,int N,int &index);
	double define_note_duration_from_fraction(string inputFrac,double timePerMeasure);
	double determine_standard_deviation_of_peak(double *inputX,double *inputY,int index,int numNeighbors,int Sz);
	int* determine_peak_indices(double* X,double* freq,int Sz,int numNeighbors,double cutOffFrac,int &numPeaks);
	double determine_total_song_time(string durationLst,int numNotes,string innerDelimiter);
	bool directory_exist(string fPath);
	string extract_containing_folder(string fPath);
	string extract_file_name(string fPath);
	double extrapolate(double x,double x1,double x2,double y1,double y2);
	void dnoise_song(string inputFile,string outputFile,char** envp);
	string extract_letter_from_noteCode(string noteCode);
	string extract_octave_from_noteCode(string noteCode);
	string extract_other_marks_from_noteCode(string noteCode);
	void extract_regular_notes_from_measure(string measure,string inputValue,int &pos,double timePerMeasure,string frequenciesInMeasure,bool &NOTE_SHARP,\
									bool &NOTE_DOUBLE_SHARP,bool &NOTE_FLAT,bool &NOTE_DOUBLE_FLAT,string &theNote,string &theNoteDuration,string &theAmplitude);
	void extract_staccato_notes_from_measure(string measure,string inputValue,int &pos,double timePerMeasure,string frequenciesInMeasure,\
								bool &NOTE_SHARP,bool &NOTE_DOUBLE_SHARP,bool &NOTE_FLAT,bool &NOTE_DOUBLE_FLAT,string &theNote,string &theNoteDuration,string &theAmplitude);
	void extract_rests_from_measure(string measure,string inputValue,int &pos2,double timePerMeasure,string &theNote,string &theNoteDuration);
	void extract_sustained_notes_from_measure(string measure,string inputValue,int &pos,double timePerMeasure,string frequenciesInMeasure,\
									bool &NOTE_SHARP,bool &NOTE_DOUBLE_SHARP,bool &NOTE_FLAT,bool &NOTE_DOUBLE_FLAT,string &theNote,string &theNoteDuration,string &theAmplitude);
	bool file_exist(string fPath);
	int* fill_int_array(string Data,int numPnts,string delimiter);	
	double* fill_double_array(string Data,int numPnts,string delimiter);	
	SAMPLE* fill_sample_array(string Data,int numPnts,string delimiter);
	string* fill_string_array(string Data,int numPnts,string delimiter);
	string formatNumberString(string Num);
	void frequency_shift_signal(string inputWaveFile,double changeInFrequency,char **envp,string outputWaveFile);
	double* generate_normalized_Gaussian_distribution(double avg,double std_dev,double* x,int Sz);
	void generate_animation(string dataFile,double endTime,int Sz,double xRange,string title,string mp3File,string noteFile,string outputMp4File);
	double* generate_drum_sound(string drumType,double strikeVelocity,double noteVolume,char** envp,double fractionOfMeasureOccupied,int& outputArrSz);	
	double* generate_guitar_sound(double noteDuration,double pitch,char** envp,int& outputArrSz);	
	double* generate_miramba_sound(double freq,char** envp,int& outputArrSz);
	double* generate_piano_sound(double noteDuration,double freq,char** envp,int& outputArrSz);
	double* generate_pluck_sound(double noteVolume,double pitch,char** envp,int& outputArrSz);
	double* generate_pluck2_sound(double noteVolume,double pitch,char** envp,int& outputArrSz);
	double* generate_plucked_bass_sound(double noteVolume,double pitch,double pluckDuration,double noteDuration,char** envp,int& outputArrSz);
	double* generate_plucked_string_sound(double noteVolume,double pitch,double noteDuration,char** envp,int& outputArrSz);
	double* generate_sound(string soundType,string filterCommand,double noteDuration,double freq,double timePerMeasure,string note,int octaveLevel,string otherMarks,char **envp,int &tmpN);
	double* generate_soundFont_sound(string soundType,double noteDuration,double pitch,string otherMarks,char** envp,int& outputArrSz);
	double* generate_soundFont_sound(string soundType,string filterCommand,double noteDuration,double pitch,string otherMarks,char** envp,int& outputArrSz);
	double* generate_strings_sound(double noteVolume,double pitch,char** envp,int& outputArrSz);
	double* generate_strings2_sound(double noteVolume,double pitch,char** envp,int& outputArrSz);	
	double* generate_tambourine_sound(double noteDuration,char** envp,int& outputArrSz);	
	double* generate_trumpet_sound(double noteDuration,double pitch,char** envp,int& outputArrSz);
	int get_pitch_for_misc_percussion_type(string drumType);
	int get_pitch_for_simple_drums_type(string drumType);
	string get_soundFont_File_from_soundType(string soundType,string otherMarks);
	double get_wave_file_time_duration(string waveFile);
	double get_A_frequency_from_octave(int octaveLevel);
	double get_As_frequency_from_octave(int octaveLevel);
	double get_B_frequency_from_octave(int octaveLevel);
	double get_C_frequency_from_octave(int octaveLevel);
	double get_Cs_frequency_from_octave(int octaveLevel);
	double get_D_frequency_from_octave(int octaveLevel);
	double get_Ds_frequency_from_octave(int octaveLevel);
	double get_E_frequency_from_octave(int octaveLevel);
	double get_F_frequency_from_octave(int octaveLevel);
	double get_Fs_frequency_from_octave(int octaveLevel);
	double get_G_frequency_from_octave(int octaveLevel);
	double get_Gs_frequency_from_octave(int octaveLevel);
	double getFrequencyOfNote(string note,int octaveLevel);
	string get_gnuplot_label_from_noteCode(string Note);
	double interpolate(double x,double x1,double x2,double y1,double y2);
	FILE * spawn_gnuplot();
	void plot_signal(string plotOptions,string plotFile,double* x,double* y,int Sz);
	void plot_signal(string plotOptions,string plotFile,double* x,SAMPLE* y,int Sz);
	soundSignal read_drums_input_file(string inFile,string soundType,double timePerMeasure,char **envp);
	soundSignal read_misc_percussion_input_file(string inFile,string soundType,double timePerMeasure,char **envp);
	soundSignal read_music_input_file(string inFile,string soundType,string filterCommand,double timePerMeasure,char** envp);
	soundSignal read_sawtooth_input_file(string inFile,string soundType,double timePerMeasure);
	soundSignal read_simple_drums_input_file(string inFile,string soundType,double timePerMeasure,char **envp);
	soundSignal read_sinusoid_input_file(string inFile,string soundType,double timePerMeasure);
	soundSignal read_triangle_wave_input_file(string inFile,string soundType,double timePerMeasure);
	syntheticSong read_song_input_file(string inputFile,char** envp);
	string repeat_string(string Input,int Num);
	string remove_excess_white_space(string inStr);
	double* read_amplitudes_in_wave_file(string inFile,int& N);
	soundSignal read_amplitudes_in_wave_file(string inFile);
	void run_csound(string orchestraFile,string scoreFile,string waveFile,char** envp);
	void run_dnoise(string orchestraFile,string scoreFile,char** envp);
	string write_clarinet_score(string noteVolume,string pitch,string noteDuration);
	string write_dnoise_orchestra();
	string write_dnoise_score(string theDuration);
	string write_drums_score(string drumType,string noteStartTime,double noteDuration,string strikeVelocity,string noteVolume);
	string write_flute_score(string noteVolume,string pitch,string noteDuration);
	string write_miramba_score(string freq);
	string write_orchestra_for_frequency_shift(string inputWaveFile);
	string write_orchestra_for_soundFonts(string soundFontsFile);
	string write_orchestra_for_soundFonts(string soundFontsFile,string filterCommand);
	string write_piano_score(string noteDuration,string freq);
	string write_pluck2_score(string noteVolume,string pitch);
	string write_pluck_score(string noteVolume,string pitch);
	string write_plucked_bass_score(string noteVolume,string pitch,string pluckDuration,string noteDuration);
	string write_plucked_string_score(string noteVolume,string pitch,string noteDuration);
	string write_saxophone_score(string noteDuration,string freq);
	string write_score_for_frequency_shift(string noteDuration,string changeInFrequency);
	string write_score_for_soundFonts(string noteDuration,string pitch,string strikeVelocity);
	string write_strings_score(string noteVolume,string pitch);
	string write_strings2_score(string noteVolume,string pitch);
	string write_tambourine_score(string noteDuration);
	double* correct_sound_size(int desiredN,int actualN,double* inputArr);
	bool waveFile_is_good(string waveFile);
	void write_blank_drums_score_sound_file(string soundFile);
	void write_demo_drums_score_sound_file(string soundFile);
	void write_blank_misc_percussion_sound_file(string outFile);
	void write_demo_misc_percussion_sound_file(string outFile);
	void write_blank_music_score_sound_file(string soundFile);
	void write_blank_simple_drums_score_sound_file(string outFile);
	void write_demo_simple_drums_score_sound_file(string outFile);
	void write_gnuplot_scripts(string dataFile,double endTime);
	void write_gnuplot_scripts_with_keys(string dataFile,string noteFile,double endTime,double xRange,string instrumentLabel,bool IS_DRUMS);
	void write_expanded_music_input_file(string inFile,string blockNameLst,string blockDefLst,int numBlocks);
	string write_keyboard_labels(string keyColor,string sharpKeyColor);
	void write_wave_file(string inFile,double *Data,int numPnts);
	void write_wave_file(string inFile,SAMPLE *Data,int numPnts);

# endif
